###############################################################################
# Copyright (c), The AiiDA-CP2K authors.                                      #
# SPDX-License-Identifier: MIT                                                #
# AiiDA-CP2K is hosted on GitHub at https://github.com/aiidateam/aiida-cp2k   #
# For further information on the license, see the LICENSE.txt file.           #
###############################################################################
"""Test output parser."""
from pathlib import Path
import pytest

from aiida_cp2k.utils.parser import (
    _parse_bands,
    parse_cp2k_output,
    parse_cp2k_output_advanced,
    parse_cp2k_trajectory,
)

THISDIR = Path(__file__).parent.resolve()


def dict_is_subset(a, b):
    return set(a.items()).issubset(set(b.items()))


@pytest.mark.parametrize(
    "output_file",
    [
        "BANDS_output_v5.1.out",
        "BANDS_output_v8.1.out",
    ],
)
def test_bands_parser(output_file):
    with open({THISDIR} / "outputs" / output_file) as fobj:
        lines = fobj.readlines()
        for i_line, line in enumerate(lines):
            if "KPOINTS| Band Structure Calculation" in line:
                kpoints, labels, bands = _parse_bands(lines, i_line, 5.1)
        assert (kpoints[4] == [0.2, 0.0, 0.2]).all()
        assert labels == [
            (0, "GAMMA"),
            (10, "X"),
            (20, "U"),
            (21, "K"),
            (31, "GAMMA"),
            (41, "L"),
            (51, "W"),
            (61, "X"),
        ]
        assert (
            bands[0] == [-6.84282475, 5.23143741, 5.23143741, 5.23143741, 7.89232311]
        ).all()


cdft_dos_cp2k_6_0_out_result = {
    "exceeded_walltime": False,
    "energy": -1544.4756023218408,
    "energy_units": "a.u.",
    "nwarnings": 1,
}
ot_v9_1_out_result = {
    "exceeded_walltime": False,
    "energy": -26352.215747926548,
    "energy_units": "a.u.",
    "nwarnings": 1,
}

bands_output_v5_1_result = {
    "exceeded_walltime": False,
    "energy": -7.944253454494698,
    "energy_units": "a.u.",
    "nwarnings": 3,
}

bands_output_v8_1_result = {
    "exceeded_walltime": False,
    "energy": -7.944253454478329,
    "energy_units": "a.u.",
    "nwarnings": 3,
}

bsse_output_v5_1_result = {"exceeded_walltime": False, "nwarnings": 0}


@pytest.mark.parametrize(
    "output_file, reference_dict",
    [
        ("BANDS_output_v5.1.out", bands_output_v5_1_result),
        ("BANDS_output_v8.1.out", bands_output_v8_1_result),
        ("BSSE_output_v5.1_.out", bsse_output_v5_1_result),
        ("cdft_dos_cp2k_6.0.out", cdft_dos_cp2k_6_0_out_result),
        ("OT_v9.1.out", ot_v9_1_out_result),
    ],
)
def test_cp2k_output_parser(output_file, result_dict):
    with open(THISDIR / "outputs" / output_file) as fobj:
        lines = fobj.read()
        result_dict = parse_cp2k_output(lines)
        assert dict_is_subset(cdft_dos_cp2k_6_0_out_result, result_dict)


bands_output_v5_1_out_advanced_result = {
    "exceeded_walltime": False,
    "warnings": [],
    "cp2k_version": 5.1,
    "run_type": "ENERGY_FORCE",
    "motion_opt_converged": False,
    "motion_step_info": {
        "step": [0],
        "energy_au": [-7.944253454494698],
        "dispersion_energy_au": [None],
        "pressure_bar": [None],
        "cell_vol_angs3": [39.168],
        "cell_a_angs": [3.812],
        "cell_b_angs": [3.812],
        "cell_c_angs": [3.812],
        "cell_alp_deg": [60.0],
        "cell_bet_deg": [60.0],
        "cell_gam_deg": [60.0],
        "max_step_au": [None],
        "rms_step_au": [None],
        "max_grad_au": [None],
        "rms_grad_au": [None],
        "edens_rspace": [-1.4e-09],
        "scf_converged": [True],
    },
    "dft_type": "RKS",
    "natoms": 2,
    "smear_method": "FERMI_DIRAC",
    "init_nel_spin1": 4,
    "init_nel_spin2": 4,
    "energy_scf": -7.94319983408946,
    "energy": -7.944253454494698,
    "energy_units": "a.u.",
    "nwarnings": 3,
}

bands_output_v8_1_out_advanced_result = {
    "exceeded_walltime": False,
    "warnings": [],
    "cp2k_version": 8.1,
    "run_type": "ENERGY_FORCE",
    "motion_opt_converged": False,
    "motion_step_info": {
        "step": [0],
        "energy_au": [-7.944253454478329],
        "dispersion_energy_au": [None],
        "pressure_bar": [None],
        "cell_vol_angs3": [39.167875],
        "cell_a_angs": [3.81196],
        "cell_b_angs": [3.81196],
        "cell_c_angs": [3.81196],
        "cell_alp_deg": [60.0],
        "cell_bet_deg": [60.0],
        "cell_gam_deg": [60.0],
        "max_step_au": [None],
        "rms_step_au": [None],
        "max_grad_au": [None],
        "rms_grad_au": [None],
        "edens_rspace": [-1.5e-09],
        "scf_converged": [True],
    },
    "dft_type": "RKS",
    "natoms": 2,
    "smear_method": "FERMI_DIRAC",
    "init_nel_spin1": 4,
    "init_nel_spin2": 4,
    "energy_scf": -7.94319983402503,
    "energy": -7.944253454478329,
    "energy_units": "a.u.",
    "nwarnings": 3,
}

bsse_output_v5_1_out_advanced_result = {
    "exceeded_walltime": False,
    "warnings": [],
    "cp2k_version": 5.1,
    "run_type": "BSSE",
    "dft_type": "RKS",
    "natoms": 57,
    "init_nel_spin1": 141,
    "init_nel_spin2": 141,
    "energy_scf": -829.920698393915,
    "eigen_spin1_au": [
        -0.89775487,
        -0.89745554,
        -0.89293986,
        -0.89281973,
        -0.89270706,
        -0.89249031,
        -0.82364324,
        -0.82257726,
        -0.82190655,
        -0.82186213,
        -0.82032038,
        -0.82002908,
        -0.80829898,
        -0.80818615,
        -0.80778689,
        -0.80756757,
        -0.80747376,
        -0.80648914,
        -0.66889917,
        -0.66687004,
        -0.66674682,
        -0.60048119,
        -0.59830447,
        -0.59818069,
        -0.55242725,
        -0.54753584,
        -0.54740797,
        -0.50730381,
        -0.50577361,
        -0.50564244,
        -0.44658935,
        -0.44073794,
        -0.44062523,
        -0.43823394,
        -0.43099509,
        -0.43082451,
        -0.42673223,
        -0.4059369,
        -0.40579432,
        -0.38130947,
        -0.38127914,
        -0.38036902,
        -0.38029145,
        -0.3773578,
        -0.3759472,
        -0.36189859,
        -0.35525779,
        -0.35518851,
        -0.35435446,
        -0.35433923,
        -0.35182609,
        -0.34091075,
        -0.33598865,
        -0.33590762,
        -0.32859616,
        -0.32846594,
        -0.32501992,
        -0.3132358,
        -0.31314967,
        -0.31288664,
        -0.31279368,
        -0.30654666,
        -0.3063584,
        -0.30500162,
        -0.30353174,
        -0.29882455,
        -0.29803435,
        -0.29789237,
        -0.29733619,
        -0.29465155,
        -0.29449152,
        -0.28980902,
        -0.28929991,
        -0.28879559,
        -0.28833439,
        -0.28612742,
        -0.28389385,
        -0.28176435,
        -0.28142044,
        -0.28112149,
        -0.27929718,
        -0.2778654,
        -0.27758575,
        -0.27727532,
        -0.2771263,
        -0.27682847,
        -0.2738652,
        -0.27375714,
        -0.27325098,
        -0.2695767,
        -0.26637096,
        -0.26626568,
        -0.26430613,
        -0.2619975,
        -0.26180407,
        -0.25791257,
        -0.25779567,
        -0.24824001,
        -0.24450833,
        -0.23955239,
        -0.2394775,
        -0.23864984,
        -0.23428779,
        -0.23423576,
        -0.23235394,
        -0.22391027,
        -0.21778895,
        -0.21771631,
        -0.20490979,
        -0.19521181,
        -0.19417108,
        -0.19405918,
        -0.19002457,
        -0.18987555,
        -0.17723986,
        -0.17711763,
        -0.17018459,
        -0.17005902,
        -0.16630089,
        -0.16599803,
        -0.16097841,
        -0.16094795,
        -0.16090283,
        -0.16079304,
        -0.16039325,
        -0.15242919,
        -0.1470029,
        -0.14696035,
        -0.14403792,
        -0.13291485,
        -0.13283853,
        -0.13111184,
        -0.12846055,
        -0.12592385,
        -0.12589361,
        -0.12090988,
        -0.11517109,
        -0.11510157,
        -0.08221664,
        -0.08213869,
        -0.0761358,
        0.00609616,
        -1.06532308,
        -1.02913364,
        -0.50475837,
        -0.46196782,
        -0.45905109,
        -0.45901356,
        -0.32895597,
        -0.32889412,
        -0.01677818,
        -0.89779355,
        -0.89733064,
        -0.89313814,
        -0.89269739,
        -0.8925726,
        -0.89214505,
        -0.82366709,
        -0.82286708,
        -0.82210055,
        -0.82171452,
        -0.82056652,
        -0.82015955,
        -0.80853863,
        -0.80795744,
        -0.80772829,
        -0.80746868,
        -0.80720721,
        -0.80634482,
        -0.66901087,
        -0.66704812,
        -0.6667301,
        -0.60059625,
        -0.59848236,
        -0.59812575,
        -0.55250183,
        -0.54771325,
        -0.5473623,
        -0.50739681,
        -0.50590047,
        -0.50557212,
        -0.44665968,
        -0.44087342,
        -0.44059352,
        -0.43824888,
        -0.43108124,
        -0.43078187,
        -0.42677252,
        -0.40601223,
        -0.40579293,
        -0.38135967,
        -0.38109293,
        -0.38047422,
        -0.38030065,
        -0.377398,
        -0.37596087,
        -0.36183555,
        -0.35520027,
        -0.35482331,
        -0.35440553,
        -0.35432742,
        -0.35163211,
        -0.34092449,
        -0.33602166,
        -0.33580794,
        -0.32862048,
        -0.32844861,
        -0.32500699,
        -0.31327272,
        -0.31306026,
        -0.31294006,
        -0.31273645,
        -0.30649517,
        -0.30632187,
        -0.30492887,
        -0.30349081,
        -0.29875624,
        -0.2979257,
        -0.29783034,
        -0.29729383,
        -0.29459137,
        -0.29450404,
        -0.28967652,
        -0.2892167,
        -0.28870366,
        -0.28827201,
        -0.28602059,
        -0.28379501,
        -0.28172526,
        -0.28131021,
        -0.2810758,
        -0.27920782,
        -0.27778549,
        -0.27740669,
        -0.27727656,
        -0.27692815,
        -0.27680357,
        -0.27376927,
        -0.27365289,
        -0.27319814,
        -0.26946441,
        -0.26639373,
        -0.26618788,
        -0.26422517,
        -0.26197749,
        -0.26174257,
        -0.25791568,
        -0.25782679,
        -0.24822649,
        -0.2445301,
        -0.23961498,
        -0.23938305,
        -0.23856385,
        -0.23436312,
        -0.23424738,
        -0.23238453,
        -0.22387271,
        -0.21778571,
        -0.21770391,
        -0.20490368,
        -0.1952136,
        -0.19416616,
        -0.19412269,
        -0.19005715,
        -0.18998972,
        -0.17724917,
        -0.17706445,
        -0.17015962,
        -0.16987901,
        -0.16617896,
        -0.16599625,
        -0.16100551,
        -0.1607634,
        -0.16063082,
        -0.16043395,
        -0.16026582,
        -0.15238725,
        -0.14705654,
        -0.14680008,
        -0.14409058,
        -0.13309883,
        -0.13276425,
        -0.13114439,
        -0.12847816,
        -0.12606364,
        -0.12589351,
        -0.1209544,
        -0.11528628,
        -0.11515253,
        -0.08241379,
        -0.08210059,
        -0.07625167,
        0.00590638,
        -1.06535229,
        -1.0290252,
        -0.50478847,
        -0.46199214,
        -0.45898965,
        -0.45897839,
        -0.32896387,
        -0.32894085,
        -0.01760834,
        -0.95359553,
        -0.91782227,
        -0.89011546,
        -0.88868094,
        -0.88549967,
        -0.88476466,
        -0.88416513,
        -0.88293638,
        -0.81576984,
        -0.8141112,
        -0.81399583,
        -0.81337999,
        -0.81205513,
        -0.81028306,
        -0.80101859,
        -0.80005959,
        -0.79971661,
        -0.79930587,
        -0.79840654,
        -0.79715039,
        -0.66220742,
        -0.65904684,
        -0.65776805,
        -0.59353184,
        -0.590447,
        -0.58921609,
        -0.54502325,
        -0.54023207,
        -0.53850651,
        -0.5001599,
        -0.4977,
        -0.49672543,
        -0.43873289,
        -0.43357481,
        -0.43173812,
        -0.43020343,
        -0.42320365,
        -0.42209191,
        -0.41877289,
        -0.4011139,
        -0.39787331,
        -0.39705241,
        -0.37338147,
        -0.37271964,
        -0.37227202,
        -0.37166414,
        -0.36898809,
        -0.3674872,
        -0.35702189,
        -0.35344988,
        -0.34995372,
        -0.34818092,
        -0.34638496,
        -0.34604289,
        -0.3455695,
        -0.34404292,
        -0.34250157,
        -0.33256782,
        -0.32758872,
        -0.32700531,
        -0.32071981,
        -0.31966953,
        -0.31654777,
        -0.30546259,
        -0.30502971,
        -0.30412345,
        -0.30313432,
        -0.29797487,
        -0.29745766,
        -0.29649641,
        -0.29495845,
        -0.29026869,
        -0.28936038,
        -0.28906975,
        -0.28783981,
        -0.28585149,
        -0.28529142,
        -0.28097825,
        -0.28037927,
        -0.27975634,
        -0.27896849,
        -0.27749085,
        -0.27485524,
        -0.27302662,
        -0.27245722,
        -0.27146719,
        -0.27089753,
        -0.26974259,
        -0.26877211,
        -0.26815236,
        -0.26728563,
        -0.26699091,
        -0.26524061,
        -0.26470812,
        -0.26396882,
        -0.26064591,
        -0.25885332,
        -0.25725706,
        -0.25560909,
        -0.25345166,
        -0.25284547,
        -0.24907573,
        -0.24873875,
        -0.2397483,
        -0.23637516,
        -0.23141455,
        -0.23082165,
        -0.22994444,
        -0.22742208,
        -0.22611678,
        -0.22376326,
        -0.21819019,
        -0.21713555,
        -0.21493914,
        -0.20937062,
        -0.20821483,
        -0.19604117,
        -0.18710574,
        -0.18570717,
        -0.18454341,
        -0.18141092,
        -0.18120769,
        -0.16895353,
        -0.1682233,
        -0.16213668,
        -0.16131245,
        -0.15811887,
        -0.15716976,
        -0.15337408,
        -0.15287082,
        -0.15211266,
        -0.15185745,
        -0.15142035,
        -0.1440524,
        -0.1386434,
        -0.13835902,
        -0.13555331,
        -0.12708042,
        -0.12399982,
        -0.12260058,
        -0.12020082,
        -0.11778906,
        -0.11701972,
        -0.11257783,
        -0.10711341,
        -0.10600515,
        -0.07548463,
        -0.07331737,
        -0.06796769,
        0.01228455,
    ],
    "nwarnings": 0,
}


cdft_dos_cp2k_6_0_out_advanced_result = {
    "cp2k_version": 6.0,
    "energy_scf": -1544.47560232184082,
    "nwarnings": 1,
    "run_type": "ENERGY",
    "dft_type": "UKS",
    "integrated_abs_spin_dens": [6.4548954029],
    "spin_square_ideal": 0.750000,
    "spin_square_expectation": [2.827411],
    "init_nel_spin1": 358,
    "init_nel_spin2": 357,
    "natoms": 194,
}

ot_v9_1_out_advanced_result = {
    "exceeded_walltime": False,
    "warnings": [],
    "cp2k_version": 9.1,
    "run_type": "ENERGY",
    "motion_opt_converged": False,
    "motion_step_info": {
        "step": [0],
        "energy_au": [-26352.215747926548],
        "dispersion_energy_au": [None],
        "pressure_bar": [None],
        "cell_vol_angs3": [69533.840649],
        "cell_a_angs": [35.375987],
        "cell_b_angs": [40.848671],
        "cell_c_angs": [48.118239],
        "cell_alp_deg": [90.0],
        "cell_bet_deg": [90.0],
        "cell_gam_deg": [90.0],
        "max_step_au": [None],
        "rms_step_au": [None],
        "max_grad_au": [None],
        "rms_grad_au": [None],
        "edens_rspace": [-2e-10],
        "scf_converged": [True],
    },
    "dft_type": "RKS",
    "natoms": 1101,
    "init_nel_spin1": 4560,
    "init_nel_spin2": 4560,
    "energy_scf": -26352.215747926548,
    "eigen_spin1_au": [-0.06400983],
    "energy": -26352.215747926548,
    "energy_units": "a.u.",
    "nwarnings": 1,
}


@pytest.mark.parametrize(
    "output_file, reference_dict",
    [
        ("BANDS_output_v5.1.out", bands_output_v5_1_out_advanced_result),
        ("BANDS_output_v8.1.out", bands_output_v8_1_out_advanced_result),
        ("BSSE_output_v5.1_.out", bsse_output_v5_1_out_advanced_result),
        ("cdft_dos_cp2k_6.0.out", cdft_dos_cp2k_6_0_out_advanced_result),
        ("OT_v9.1.out", ot_v9_1_out_advanced_result),
    ],
)
def test_cp2k_output_advanced(output_file, reference_dict):
    """Test parse_cp2k_advanced output"""
    with open(THISDIR / "outputs" / "cdft_dos_cp2k_6.0.out") as fobj:
        lines = fobj.read()
        result = parse_cp2k_advanced(lines)
        assert dict_is_subset(reference_dict, result)


def test_trajectory_parser_pbc():
    """Test parsing of boundary conditions from the restart-file"""
    files = [
        "PBC_output_xyz.restart",
        "PBC_output_xz.restart",
        "PBC_output_none.restart",
    ]
    boundary_conditions = [
        [True, True, True],
        [True, False, True],
        [False, False, False],
    ]

    for file, boundary_cond in zip(files, boundary_conditions):
        with open(f"{THISDIR}/outputs/{file}") as fobj:
            content = fobj.read()
            structure_data = parse_cp2k_trajectory(content)

            assert structure_data["pbc"] == boundary_cond
